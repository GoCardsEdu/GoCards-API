/*
 * This file is generated by jOOQ.
 */
package pl.gocards.api.jooq.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.gocards.api.jooq.Keys;
import pl.gocards.api.jooq.Public;
import pl.gocards.api.jooq.tables.Card.CardPath;
import pl.gocards.api.jooq.tables.records.DeckRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Deck extends TableImpl<DeckRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.deck</code>
     */
    public static final Deck DECK = new Deck();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DeckRecord> getRecordType() {
        return DeckRecord.class;
    }

    /**
     * The column <code>public.deck.id</code>.
     */
    public final TableField<DeckRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.deck.name</code>.
     */
    public final TableField<DeckRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.deck.created_at</code>.
     */
    public final TableField<DeckRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.deck.updated_at</code>.
     */
    public final TableField<DeckRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private Deck(Name alias, Table<DeckRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Deck(Name alias, Table<DeckRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.deck</code> table reference
     */
    public Deck(String alias) {
        this(DSL.name(alias), DECK);
    }

    /**
     * Create an aliased <code>public.deck</code> table reference
     */
    public Deck(Name alias) {
        this(alias, DECK);
    }

    /**
     * Create a <code>public.deck</code> table reference
     */
    public Deck() {
        this(DSL.name("deck"), null);
    }

    public <O extends Record> Deck(Table<O> path, ForeignKey<O, DeckRecord> childPath, InverseForeignKey<O, DeckRecord> parentPath) {
        super(path, childPath, parentPath, DECK);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class DeckPath extends Deck implements Path<DeckRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> DeckPath(Table<O> path, ForeignKey<O, DeckRecord> childPath, InverseForeignKey<O, DeckRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private DeckPath(Name alias, Table<DeckRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public DeckPath as(String alias) {
            return new DeckPath(DSL.name(alias), this);
        }

        @Override
        public DeckPath as(Name alias) {
            return new DeckPath(alias, this);
        }

        @Override
        public DeckPath as(Table<?> alias) {
            return new DeckPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<DeckRecord> getPrimaryKey() {
        return Keys.DECK_PK;
    }

    private transient CardPath _card;

    /**
     * Get the implicit to-many join path to the <code>public.card</code> table
     */
    public CardPath card() {
        if (_card == null)
            _card = new CardPath(this, null, Keys.CARD__CARD_DECK_ID_FKEY.getInverseKey());

        return _card;
    }

    @Override
    public Deck as(String alias) {
        return new Deck(DSL.name(alias), this);
    }

    @Override
    public Deck as(Name alias) {
        return new Deck(alias, this);
    }

    @Override
    public Deck as(Table<?> alias) {
        return new Deck(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Deck rename(String name) {
        return new Deck(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Deck rename(Name name) {
        return new Deck(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Deck rename(Table<?> name) {
        return new Deck(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Deck where(Condition condition) {
        return new Deck(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Deck where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Deck where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Deck where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Deck where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Deck where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Deck where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Deck where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Deck whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Deck whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
