/*
 * This file is generated by jOOQ.
 */
package pl.gocards.api.jooq;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import pl.gocards.api.jooq.tables.Card;
import pl.gocards.api.jooq.tables.CardBack;
import pl.gocards.api.jooq.tables.CardFront;
import pl.gocards.api.jooq.tables.Deck;
import pl.gocards.api.jooq.tables.FlywaySchemaHistory;
import pl.gocards.api.jooq.tables.records.CardBackRecord;
import pl.gocards.api.jooq.tables.records.CardFrontRecord;
import pl.gocards.api.jooq.tables.records.CardRecord;
import pl.gocards.api.jooq.tables.records.DeckRecord;
import pl.gocards.api.jooq.tables.records.FlywaySchemaHistoryRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CardRecord> CARD_DECK_ID_ORDINAL_KEY = Internal.createUniqueKey(Card.CARD, DSL.name("card_deck_id_ordinal_key"), new TableField[] { Card.CARD.DECK_ID, Card.CARD.ORDINAL }, true);
    public static final UniqueKey<CardRecord> CARD_PK = Internal.createUniqueKey(Card.CARD, DSL.name("card_pk"), new TableField[] { Card.CARD.ID }, true);
    public static final UniqueKey<CardBackRecord> CARD_BACK_PKEY = Internal.createUniqueKey(CardBack.CARD_BACK, DSL.name("card_back_pkey"), new TableField[] { CardBack.CARD_BACK.CARD_ID, CardBack.CARD_BACK.NAME }, true);
    public static final UniqueKey<CardFrontRecord> CARD_FRONT_PKEY = Internal.createUniqueKey(CardFront.CARD_FRONT, DSL.name("card_front_pkey"), new TableField[] { CardFront.CARD_FRONT.CARD_ID, CardFront.CARD_FRONT.NAME }, true);
    public static final UniqueKey<DeckRecord> DECK_PK = Internal.createUniqueKey(Deck.DECK, DSL.name("deck_pk"), new TableField[] { Deck.DECK.ID }, true);
    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<CardRecord, DeckRecord> CARD__CARD_DECK_ID_FKEY = Internal.createForeignKey(Card.CARD, DSL.name("card_deck_id_fkey"), new TableField[] { Card.CARD.DECK_ID }, Keys.DECK_PK, new TableField[] { Deck.DECK.ID }, true);
    public static final ForeignKey<CardBackRecord, CardRecord> CARD_BACK__CARD_BACK_CARD_ID_FKEY = Internal.createForeignKey(CardBack.CARD_BACK, DSL.name("card_back_card_id_fkey"), new TableField[] { CardBack.CARD_BACK.CARD_ID }, Keys.CARD_PK, new TableField[] { Card.CARD.ID }, true);
    public static final ForeignKey<CardFrontRecord, CardRecord> CARD_FRONT__CARD_FRONT_CARD_ID_FKEY = Internal.createForeignKey(CardFront.CARD_FRONT, DSL.name("card_front_card_id_fkey"), new TableField[] { CardFront.CARD_FRONT.CARD_ID }, Keys.CARD_PK, new TableField[] { Card.CARD.ID }, true);
}
